@page "/"
@using degreed_core.Clients
@using Microsoft.AspNetCore.Components.Web
@using degreed_core.Clients.Models
@using degreed_core.Utils
@inject ICanHazApiClient Client
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">Degreed - Take Home Assignment</h1>

    <div class="card mb-4">
        <div class="card-header">
            <h5>Random Dad Joke</h5>
        </div>
        <div class="card-body">
            <button class="btn btn-primary mb-3" @onclick="GetRandomJoke">Get Random Joke</button>
            <p class="mb-0 @(string.IsNullOrEmpty(joke) ? "d-none" : "")">@joke</p>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h5>Search Dad Jokes</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Enter search term" @bind="searchTerm" @bind:event="oninput" @onkeypress="HandleKeyPress" />
                        <button class="btn btn-secondary" @onclick="SearchJokes">Search</button>
                    </div>
                </div>
            </div>

            @if (searchResult != null && groupedJokes != null)
            {
                <ul class="nav nav-tabs mb-3" id="jokesTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all-jokes" type="button" role="tab" aria-controls="all-jokes" aria-selected="true">All (@searchResult.total_jokes)</button>
                    </li>
                    @if (groupedJokes.ContainsKey(Extensions.WordCountBucket.Short))
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="short-tab" data-bs-toggle="tab" data-bs-target="#short-jokes" type="button" role="tab" aria-controls="short-jokes" aria-selected="false">Short (@groupedJokes[Extensions.WordCountBucket.Short].Count)</button>
                        </li>
                    }
                    @if (groupedJokes.ContainsKey(Extensions.WordCountBucket.Medium))
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="medium-tab" data-bs-toggle="tab" data-bs-target="#medium-jokes" type="button" role="tab" aria-controls="medium-jokes" aria-selected="false">Medium (@groupedJokes[Extensions.WordCountBucket.Medium].Count)</button>
                        </li>
                    }
                    @if (groupedJokes.ContainsKey(Extensions.WordCountBucket.Long))
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="long-tab" data-bs-toggle="tab" data-bs-target="#long-jokes" type="button" role="tab" aria-controls="long-jokes" aria-selected="false">Long (@groupedJokes[Extensions.WordCountBucket.Long].Count)</button>
                        </li>
                    }
                </ul>

                <div class="tab-content" id="jokesTabContent">
                    <div class="tab-pane fade show active" id="all-jokes" role="tabpanel" aria-labelledby="all-tab">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Joke</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var joke in searchResult.results.Take(30))
                                    {
                                        <tr>
                                            <td>@((MarkupString)joke.joke.HighlightSearchTerm(searchTerm))</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    @if (groupedJokes.ContainsKey(Extensions.WordCountBucket.Short))
                    {
                        <div class="tab-pane fade" id="short-jokes" role="tabpanel" aria-labelledby="short-tab">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Joke (Less than 10 words)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var joke in groupedJokes[Extensions.WordCountBucket.Short])
                                        {
                                            <tr>
                                                <td>@((MarkupString)joke.joke.HighlightSearchTerm(searchTerm))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                    
                    @if (groupedJokes.ContainsKey(Extensions.WordCountBucket.Medium))
                    {
                        <div class="tab-pane fade" id="medium-jokes" role="tabpanel" aria-labelledby="medium-tab">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Joke (10-19 words)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var joke in groupedJokes[Extensions.WordCountBucket.Medium])
                                        {
                                            <tr>
                                                <td>@((MarkupString)joke.joke.HighlightSearchTerm(searchTerm))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                    
                    @if (groupedJokes.ContainsKey(Extensions.WordCountBucket.Long))
                    {
                        <div class="tab-pane fade" id="long-jokes" role="tabpanel" aria-labelledby="long-tab">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Joke (20+ words)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var joke in groupedJokes[Extensions.WordCountBucket.Long])
                                        {
                                            <tr>
                                                <td>@((MarkupString)joke.joke.HighlightSearchTerm(searchTerm))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        Showing page @searchResult.current_page of @searchResult.total_pages 
                        (@searchResult.total_jokes total jokes)
                    </div>
                    <div>
                        <nav aria-label="Page navigation">
                            <ul class="pagination">
                                <li class="page-item @(searchResult.current_page <= 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(searchResult.current_page <= 1)">First</button>
                                </li>
                                <li class="page-item @(searchResult.current_page <= 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(searchResult.current_page - 1)" disabled="@(searchResult.current_page <= 1)">Previous</button>
                                </li>
                                @for (int i = Math.Max(1, searchResult.current_page - 2); i <= Math.Min(searchResult.total_pages, searchResult.current_page + 2); i++)
                                {
                                    int pageNumber = i;
                                    <li class="page-item @(searchResult.current_page == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }
                                <li class="page-item @(searchResult.current_page >= searchResult.total_pages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(searchResult.current_page + 1)" disabled="@(searchResult.current_page >= searchResult.total_pages)">Next</button>
                                </li>
                                <li class="page-item @(searchResult.current_page >= searchResult.total_pages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(searchResult.total_pages)" disabled="@(searchResult.current_page >= searchResult.total_pages)">Last</button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string joke;
    private string searchTerm = "";
    private SearchResult searchResult;
    private IDictionary<Extensions.WordCountBucket, List<JokeResult>> groupedJokes;
    private int currentPage = 1;
    private const int PageSize = 30;

    protected override async Task OnInitializedAsync() {
        joke = "Click the button to get a random joke!";
    }

    private async Task GetRandomJoke() {
        var jokeResult = await Client.Random();
        joke = jokeResult?.joke ?? "There was an error retrieving the random joke...";
    }

    private async Task SearchJokes() {
        if (string.IsNullOrWhiteSpace(searchTerm)) {
            searchTerm = "";
        }
        
        currentPage = 1;
        await LoadPage(currentPage);
    }
    
    private async Task GoToPage(int page) {
        currentPage = page;
        await LoadPage(page);
    }
    
    private async Task LoadPage(int page) {
        searchResult = await Client.Search(page, PageSize, searchTerm);
        if (searchResult != null) {
            groupedJokes = searchResult.GroupByLength();
        }
    }
    
    private async Task HandleKeyPress(KeyboardEventArgs e) {
        if (e.Key == "Enter") {
            await SearchJokes();
        }
    }

    private async Task GetSearchResults() {
        searchResult = await Client.Search(1, PageSize);
        if (searchResult != null) {
            groupedJokes = searchResult.GroupByLength();
        }
    }
}
