@page "/"
@using degreed_core.Services
@using degreed_core.Utils
@using Microsoft.AspNetCore.Components.Web
@inject IJokeService JokeService
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">Degreed - Take Home Assignment</h1>

    <div class="card mb-4">
        <div class="card-header">
            <h5>Random Dad Joke</h5>
        </div>
        <div class="card-body">
            <button class="btn btn-primary mb-3" @onclick="GetRandomJoke">Get Random Joke</button>
            <p class="mb-0 @(string.IsNullOrEmpty(joke) ? "d-none" : "")">@joke</p>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h5>Search Dad Jokes</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Enter search term" @bind="searchTerm" @bind:event="oninput" @onkeypress="HandleKeyPress" />
                        <button class="btn btn-secondary" @onclick="SearchJokes">Search</button>
                    </div>
                </div>
            </div>

            @if (viewModel != null)
            {
                <ul class="nav nav-tabs mb-3" id="jokesTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all-jokes" type="button" role="tab" aria-controls="all-jokes" aria-selected="true">All (@viewModel.TotalJokes)</button>
                    </li>
                    @if (viewModel.ShortJokes.Any())
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="short-tab" data-bs-toggle="tab" data-bs-target="#short-jokes" type="button" role="tab" aria-controls="short-jokes" aria-selected="false">Short (@viewModel.ShortJokes.Count)</button>
                        </li>
                    }
                    @if (viewModel.MediumJokes.Any())
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="medium-tab" data-bs-toggle="tab" data-bs-target="#medium-jokes" type="button" role="tab" aria-controls="medium-jokes" aria-selected="false">Medium (@viewModel.MediumJokes.Count)</button>
                        </li>
                    }
                    @if (viewModel.LongJokes.Any())
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="long-tab" data-bs-toggle="tab" data-bs-target="#long-jokes" type="button" role="tab" aria-controls="long-jokes" aria-selected="false">Long (@viewModel.LongJokes.Count)</button>
                        </li>
                    }
                </ul>

                <div class="tab-content" id="jokesTabContent">
                    <div class="tab-pane fade show active" id="all-jokes" role="tabpanel" aria-labelledby="all-tab">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Joke</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var joke in viewModel.Jokes)
                                    {
                                        <tr>
                                            <td>@((MarkupString)joke.HighlightedText)</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    @if (viewModel.ShortJokes.Any())
                    {
                        <div class="tab-pane fade" id="short-jokes" role="tabpanel" aria-labelledby="short-tab">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Joke (Less than 10 words)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var joke in viewModel.ShortJokes)
                                        {
                                            <tr>
                                                <td>@((MarkupString)joke.HighlightedText)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                    
                    @if (viewModel.MediumJokes.Any())
                    {
                        <div class="tab-pane fade" id="medium-jokes" role="tabpanel" aria-labelledby="medium-tab">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Joke (10-19 words)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var joke in viewModel.MediumJokes)
                                        {
                                            <tr>
                                                <td>@((MarkupString)joke.HighlightedText)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                    
                    @if (viewModel.LongJokes.Any())
                    {
                        <div class="tab-pane fade" id="long-jokes" role="tabpanel" aria-labelledby="long-tab">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Joke (20+ words)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var joke in viewModel.LongJokes)
                                        {
                                            <tr>
                                                <td>@((MarkupString)joke.HighlightedText)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        Showing page @viewModel.CurrentPage of @viewModel.TotalPages 
                        (@viewModel.TotalJokes total jokes)
                    </div>
                    <div>
                        <nav aria-label="Page navigation">
                            <ul class="pagination">
                                <li class="page-item @(viewModel.CurrentPage <= 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(viewModel.CurrentPage <= 1)">First</button>
                                </li>
                                <li class="page-item @(viewModel.CurrentPage <= 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(viewModel.CurrentPage - 1)" disabled="@(viewModel.CurrentPage <= 1)">Previous</button>
                                </li>
                                @for (int i = Math.Max(1, viewModel.CurrentPage - 2); i <= Math.Min(viewModel.TotalPages, viewModel.CurrentPage + 2); i++)
                                {
                                    int pageNumber = i;
                                    <li class="page-item @(viewModel.CurrentPage == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }
                                <li class="page-item @(viewModel.CurrentPage >= viewModel.TotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(viewModel.CurrentPage + 1)" disabled="@(viewModel.CurrentPage >= viewModel.TotalPages)">Next</button>
                                </li>
                                <li class="page-item @(viewModel.CurrentPage >= viewModel.TotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(viewModel.TotalPages)" disabled="@(viewModel.CurrentPage >= viewModel.TotalPages)">Last</button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string joke;
    private string searchTerm = "";
    private JokeSearchViewModel viewModel;
    private const int PageSize = 30;

    protected override async Task OnInitializedAsync() {
        joke = "Click the button to get a random joke!";
    }

    private async Task GetRandomJoke() {
        var jokeResult = await JokeService.GetRandomJoke();
        joke = jokeResult?.joke ?? "There was an error retrieving the random joke...";
    }

    private async Task SearchJokes() {
        await LoadPage(1);
    }
    
    private async Task GoToPage(int page) {
        await LoadPage(page);
    }
    
    private async Task LoadPage(int page) {
        viewModel = await JokeService.SearchJokes(searchTerm, page, PageSize);
    }
    
    private async Task HandleKeyPress(KeyboardEventArgs e) {
        if (e.Key == "Enter") {
            await SearchJokes();
        }
    }
}